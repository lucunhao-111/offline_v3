import requests
import json
import time
import hashlib
import os
from datetime import datetime

# API配置
FX_API_URL = "https://fx.cmbchina.com/api/v1/fx/rate"
DATA_DIR = "fx_data"
history_fx_data = None

def ensure_data_directory():
    """确保数据目录存在"""
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
        print(f"📁 创建数据目录: {DATA_DIR}")
    return DATA_DIR

def get_fx_data():
    """获取外汇数据"""

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8",
        "Accept-Encoding": "gzip, deflate, br",
        "Referer": "https://fx.cmbchina.com/hq",
        "Origin": "https://fx.cmbchina.com",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
    }

    try:
        print("🌐 正在获取外汇数据...")
        response = requests.get(FX_API_URL, headers=headers, timeout=10)
        response.raise_for_status()

        data = response.json()

        # 添加时间戳
        current_time = datetime.now()
        formatted_data = {
            "data": data,
            "update_time": current_time.strftime("%Y-%m-%d %H:%M:%S"),
            "timestamp": int(current_time.timestamp())
        }

        print(f"✅ 获取外汇数据成功 - 数据条数: {len(data) if isinstance(data, list) else '未知'}")
        return formatted_data

    except requests.exceptions.RequestException as e:
        print(f"❌ 网络请求失败: {str(e)}")
        return None
    except json.JSONDecodeError as e:
        print(f"❌ JSON解析失败: {str(e)}")
        return None
    except Exception as e:
        print(f"❌ 获取外汇数据失败: {str(e)}")
        return None

def is_data_updated(new_data, old_data):
    """判断数据是否更新"""
    if old_data is None:
        return True
    if new_data is None:
        return False

    try:
        # 创建数据的副本，移除时间相关字段
        new_copy = new_data.copy()
        old_copy = old_data.copy()

        # 移除会影响比较的字段
        new_copy.pop('update_time', None)
        new_copy.pop('timestamp', None)
        old_copy.pop('update_time', None)
        old_copy.pop('timestamp', None)

        # 计算哈希值
        new_hash = hashlib.md5(json.dumps(new_copy, sort_keys=True).encode()).hexdigest()
        old_hash = hashlib.md5(json.dumps(old_copy, sort_keys=True).encode()).hexdigest()

        return new_hash != old_hash

    except Exception as e:
        print(f"比较数据时出错: {e}")
        return True

def save_fx_data(data):
    """保存外汇数据"""
    if data:
        try:
            data_dir = ensure_data_directory()

            # 创建文件名
            current_time = datetime.now()
            date_str = current_time.strftime("%Y%m%d")
            time_str = current_time.strftime("%H%M%S")

            filename = f"fx_data_{date_str}_{time_str}.json"
            filepath = os.path.join(data_dir, filename)

            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            # 打印概要信息
            print(f"💾 数据已保存: {filename}")

            # 显示主要货币对信息
            if 'data' in data and isinstance(data['data'], list):
                print("📊 主要货币对汇率:")
                major_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'HKD']
                for item in data['data']:
                    if isinstance(item, dict) and item.get('currencyCode') in major_currencies:
                        code = item.get('currencyCode', '未知')
                        buy_rate = item.get('buyRate', '未知')
                        sell_rate = item.get('sellRate', '未知')
                        print(f"   {code}: 买入 {buy_rate} | 卖出 {sell_rate}")

            return filepath

        except Exception as e:
            print(f"❌ 保存失败: {str(e)}")
            return None

def cleanup_old_files(max_files=100):
    """清理旧文件，只保留最新的max_files个文件"""
    try:
        data_dir = ensure_data_directory()
        files = [f for f in os.listdir(data_dir) if f.endswith('.json')]

        if len(files) > max_files:
            files_with_mtime = []
            for f in files:
                filepath = os.path.join(data_dir, f)
                mtime = os.path.getmtime(filepath)
                files_with_mtime.append((mtime, filepath))

            files_with_mtime.sort()
            files_to_delete = files_with_mtime[:len(files) - max_files]

            for mtime, filepath in files_to_delete:
                os.remove(filepath)
                print(f"🗑️  清理旧文件: {os.path.basename(filepath)}")

    except Exception as e:
        print(f"清理文件时出错: {e}")

def analyze_api_response():
    """分析API响应结构"""
    print("🔍 分析API响应结构...")
    test_data = get_fx_data()

    if test_data and 'data' in test_data:
        data_list = test_data['data']
        if isinstance(data_list, list) and len(data_list) > 0:
            print(f"📋 数据条数: {len(data_list)}")
            print("📝 数据结构样例:")
            sample_item = data_list[0]
            for key, value in sample_item.items():
                print(f"   {key}: {value}")

            # 统计货币种类
            currencies = set()
            for item in data_list:
                if isinstance(item, dict) and 'currencyCode' in item:
                    currencies.add(item['currencyCode'])
            print(f"💰 货币种类: {len(currencies)} 种")
            print(f"💰 货币代码: {', '.join(sorted(list(currencies))[:10])}...")

    return test_data

def main():
    """主函数"""
    print("💹 开始外汇数据监控（10秒/次）...")
    data_dir = ensure_data_directory()
    print(f"数据保存目录: {os.path.abspath(data_dir)}")

    # 先分析API结构
    global history_fx_data
    history_fx_data = analyze_api_response()

    if history_fx_data:
        save_fx_data(history_fx_data)
        print("✅ 初始数据获取成功")
    else:
        print("❌ 初始数据获取失败，退出程序")
        return

    print("\n🔄 开始监控循环（每10秒检查一次）...")
    file_count = 1  # 初始文件已经保存
    check_count = 0

    while True:
        try:
            check_count += 1
            print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] 第{check_count}次检查...")

            current_fx_data = get_fx_data()

            if current_fx_data:
                if is_data_updated(current_fx_data, history_fx_data):
                    filepath = save_fx_data(current_fx_data)
                    if filepath:
                        file_count += 1
                        history_fx_data = current_fx_data
                        print(f"🔄 数据已更新 (第{file_count}次保存)")

                        # 显示变化信息（简化版）
                        print("💡 汇率数据发生变化")
                    else:
                        print("⚠️  数据有变化但保存失败")
                else:
                    print("⏸️  数据无变化，跳过保存")
            else:
                print("❌ 获取数据失败")

            # 每50次检查清理一次文件
            if check_count % 50 == 0:
                cleanup_old_files(max_files=200)

            # 10秒间隔
            print("⏰ 等待10秒后再次检查...")
            time.sleep(10)

        except KeyboardInterrupt:
            print("\n\n👋 用户中断程序")
            break
        except Exception as e:
            print(f"❌ 监控循环出错: {e}")
            time.sleep(10)  # 出错后等待10秒再重试

if __name__ == "__main__":
    main()